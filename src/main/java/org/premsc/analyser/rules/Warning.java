package org.premsc.analyser.rules;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fasterxml.jackson.databind.util.NameTransformer;
import io.github.treesitter.jtreesitter.Node;
import org.premsc.analyser.db.IndexModel;
import org.premsc.analyser.repository.ISource;

import java.io.IOException;

/**
 * Represents a warning generated by a rule during analysis.
 *
 * @param ruleId    the ID of the rule that generated the warning
 * @param file      the file where the warning occurred
 * @param line      the line number where the warning occurred
 * @param startByte the starting byte position of the warning in the file
 * @param endByte   the ending byte position of the warning in the file
 */
public record Warning(
        @JsonProperty("rule_id") int ruleId,
        @JsonProperty("file") String file,
        @JsonProperty("line") int line,
        @JsonIgnore int startByte,
        @JsonIgnore int endByte
) {

    /**
     * Constructs a Warning instance.
     *
     * @param rule      the rule that generated the warning
     * @param source    the source file where the warning occurred
     * @param line      the line number in the source file where the warning occurred
     * @param startByte the starting byte position of the warning in the source file
     * @param endByte   the ending byte position of the warning in the source file
     */
    public Warning(IRule rule, ISource source, int line, int startByte, int endByte) {
        this(rule.getId(), source.getFilepath(), line, startByte, endByte);
    }

    /**
     * Constructs a Warning instance.
     *
     * @param rule   the rule that generated the warning
     * @param source the source file where the warning occurred
     * @param node   the node in the syntax tree where the warning occurred
     */
    public Warning(IRule rule, ISource source, Node node) {
        this(rule, source, node.getStartPoint().row(), node.getStartByte(), node.getEndByte());
    }

    /**
     * Constructs a Warning instance.
     *
     * @param rule   the rule that generated the warning
     * @param source the source file where the warning occurred
     * @param index  the index model containing the line and byte positions
     */
    public Warning(IRule rule, ISource source, IndexModel.Index index) {
        this(rule, source, index.line(), index.startByte(), index.endByte());
    }

    public static class WarningModule extends SimpleModule {
        @Override
        public void setupModule(SetupContext ctx) {
            super.setupModule(ctx);
            ctx.addBeanSerializerModifier(new BeanSerializerModifier() {
                @Override
                public JsonSerializer<?> modifySerializer(
                        SerializationConfig config,
                        BeanDescription beanDesc,
                        JsonSerializer<?> serializer) {

                    if (!Warning.class.isAssignableFrom(beanDesc.getBeanClass())) {
                        return serializer;
                    }

                    @SuppressWarnings("unchecked")
                    final JsonSerializer<Object> defaultSer = (JsonSerializer<Object>) serializer;
                    final JsonSerializer<Object> unwrapping = defaultSer.unwrappingSerializer(NameTransformer.NOP);

                    return new JsonSerializer<Warning>() {
                        @Override
                        public void serialize(Warning value, JsonGenerator gen, SerializerProvider prov) throws IOException {
                            int idx = gen.getOutputContext().getCurrentIndex();
                            gen.writeStartObject();
                            if (idx >= 0) {
                                gen.writeNumberField("id", idx);
                            }

                            unwrapping.serialize(value, gen, prov);
                            gen.writeEndObject();
                        }
                    };
                }
            });
        }
    }

}
